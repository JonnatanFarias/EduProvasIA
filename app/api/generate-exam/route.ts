import { type NextRequest, NextResponse } from "next/server"
import { google } from "@ai-sdk/google" // ðŸ‘ˆ importa o provedor Gemini
import { generateText } from "ai"

export async function POST(request: NextRequest) {
  try {
    const { grade, subject, difficulty, questionTypes, questionCount, topics, instructions } = await request.json()

    const gradeMap: Record<string, string> = {
      "1ano": "1Âº Ano do Ensino Fundamental",
      "2ano": "2Âº Ano do Ensino Fundamental",
      "3ano": "3Âº Ano do Ensino Fundamental",
      "4ano": "4Âº Ano do Ensino Fundamental",
      "5ano": "5Âº Ano do Ensino Fundamental",
      "6ano": "6Âº Ano do Ensino Fundamental",
      "7ano": "7Âº Ano do Ensino Fundamental",
      "8ano": "8Âº Ano do Ensino Fundamental",
      "9ano": "9Âº Ano do Ensino Fundamental",
      "1medio": "1Âº Ano do Ensino MÃ©dio",
      "2medio": "2Âº Ano do Ensino MÃ©dio",
      "3medio": "3Âº Ano do Ensino MÃ©dio",
    }

    const subjectMap: Record<string, string> = {
      matematica: "MatemÃ¡tica",
      portugues: "PortuguÃªs",
      historia: "HistÃ³ria",
      geografia: "Geografia",
      ciencias: "CiÃªncias",
      fisica: "FÃ­sica",
      quimica: "QuÃ­mica",
      biologia: "Biologia",
      ingles: "InglÃªs",
      artes: "Artes",
      ensinoReligioso: "Ensino Religioso",
    }

    const difficultyMap: Record<string, string> = {
      facil: "FÃ¡cil",
      medio: "MÃ©dio",
      dificil: "DifÃ­cil",
    }

    const questionTypeMap: Record<string, string> = {
      "multipla-escolha": "MÃºltipla Escolha",
      "verdadeiro-falso": "Verdadeiro ou Falso",
      dissertativa: "Dissertativa",
      completar: "Completar Lacunas",
      associacao: "AssociaÃ§Ã£o",
    }

    const gradeText = gradeMap[grade] || grade
    const subjectText = subjectMap[subject] || subject
    const difficultyText = difficultyMap[difficulty] || difficulty
    const questionTypesText = questionTypes.map((type: string) => questionTypeMap[type] || type).join(", ")
    const topicsText = topics ? `TÃ³picos especÃ­ficos: ${topics}` : ""
    // Monta o texto de instruÃ§Ãµes com reforÃ§o para explicaÃ§Ãµes
    let instructionsText = ""

    if (instructions) {
      instructionsText = `InstruÃ§Ãµes adicionais: ${instructions}`

      // Se o usuÃ¡rio pediu explicaÃ§Ã£o/contexto prÃ©vio, reforÃ§a no prompt
      if (instructions.toLowerCase().includes("explicaÃ§Ã£o") || instructions.toLowerCase().includes("contexto")) {
        instructionsText += `
Cada questÃ£o deve comeÃ§ar com uma breve explicaÃ§Ã£o ou contextualizaÃ§Ã£o do tema abordado,
antes do enunciado principal. Essa explicaÃ§Ã£o deve ajudar o aluno a entender o contexto.`
      }
    }


    const prompt = `
VocÃª Ã© um especialista em educaÃ§Ã£o brasileira. Crie uma prova de ${subjectText} para ${gradeText} com as seguintes especificaÃ§Ãµes:

- NÃ­vel de dificuldade: ${difficultyText}
- NÃºmero de questÃµes: ${questionCount}
- Tipos de questÃµes: ${questionTypesText}
${topicsText}
${instructionsText}

IMPORTANTE: Retorne APENAS um JSON vÃ¡lido no seguinte formato:
{
  "title": "Prova de [Disciplina] - [SÃ©rie]",
  "subject": "${subjectText}",
  "grade": "${gradeText}",
  "difficulty": "${difficultyText}",
  "questions": [
    {
      "id": 1,
      "type": "tipo-da-questao",
      "question": "Enunciado da questÃ£o",
      "options": ["A) opÃ§Ã£o", "B) opÃ§Ã£o", "C) opÃ§Ã£o", "D) opÃ§Ã£o"] (apenas para mÃºltipla escolha),
      "correctAnswer": "resposta correta ou gabarito",
      "explanation": "explicaÃ§Ã£o da resposta"
    }
  ]
}

Regras importantes:
- Para questÃµes de mÃºltipla escolha, inclua 4 alternativas (A, B, C, D)
- Para verdadeiro/falso, use "Verdadeiro" ou "Falso" como opÃ§Ãµes
- Para dissertativas, nÃ£o inclua "options", apenas "correctAnswer" com uma resposta modelo
- Para completar lacunas, use _____ no enunciado e forneÃ§a as palavras corretas
- Para a disciplina de matemÃ¡tica tente, colocar questÃµes para realizar cÃ¡culos.
- Para associaÃ§Ã£o, crie duas colunas para associar
- Todas as questÃµes devem estar alinhadas com a BNCC (Base Nacional Comum Curricular)
- Sempre inclua o campo "explanation" com uma explicaÃ§Ã£o curta sobre o contexto ou a resposta da questÃ£o
- Use linguagem adequada para a faixa etÃ¡ria
- QuestÃµes devem ser educativas e construtivas

NÃ£o inclua texto adicional, apenas o JSON.
`

    // ðŸ‘‡ aqui usamos Gemini corretamente
    const { text } = await generateText({
      model: google("models/gemini-2.0-flash"),
      prompt,
      temperature: 0.7,
    })

    let examData
    try {
      const jsonMatch = text.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        examData = JSON.parse(jsonMatch[0])
      } else {
        throw new Error("JSON nÃ£o encontrado na resposta")
      }
    } catch (parseError) {
      console.error("Erro ao fazer parse do JSON:", parseError)
      console.error("Resposta da IA:", text)

      examData = {
        title: `Prova de ${subjectText} - ${gradeText}`,
        subject: subjectText,
        grade: gradeText,
        difficulty: difficultyText,
        questions: Array.from({ length: questionCount }, (_, i) => ({
          id: i + 1,
          type: questionTypes[i % questionTypes.length],
          question: `QuestÃ£o ${i + 1} sobre ${topics || "o conteÃºdo programÃ¡tico"}`,
          options:
            questionTypes[i % questionTypes.length] === "multipla-escolha"
              ? ["A) Alternativa A", "B) Alternativa B", "C) Alternativa C", "D) Alternativa D"]
              : undefined,
          correctAnswer: "Resposta modelo",
          explanation: "ExplicaÃ§Ã£o da questÃ£o",
        })),
      }
    }

    return NextResponse.json(examData)
  } catch (error) {
    console.error("Erro na geraÃ§Ã£o da prova:", error)
    return NextResponse.json({ error: "Erro interno do servidor" }, { status: 500 })
  }
}
